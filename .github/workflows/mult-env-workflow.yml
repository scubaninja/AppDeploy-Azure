name: Multiple Environment Workflow

on: pull_request

permissions:
      id-token: write
      contents: read

env:
  LOAD_TEST_RESOURCE: "SampleApp"

jobs:

  buildImage:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # authenticate into Docker
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_LOGIN_SERVER }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_LOGIN_SERVER }}/maxtest1webapp:${{ github.sha }}

    # Scanning Images using Microsoft Defender
    - uses: Azure/container-scan@v0 
      name: Scan image for vulnerabilities
      id: container-scan
      continue-on-error: true
      with:
        image-name: ${{ secrets.DOCKER_LOGIN_SERVER }}/maxtest1webapp:${{ github.sha }} 

    # Sending logs to AppInsights
    # - name: Post logs to appinsights
    #   uses: Azure/publish-security-assessments@v0
    #   with: 
    #     scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
    #     connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
    #     subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}

  deploy_dev:

    runs-on: ubuntu-latest
    name: Deploy to Dev
    needs: buildImage

    environment:
      name: Dev
      url: ${{ steps.get-webapp-url.outputs.webAppUrl }}

    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    - name: Deploy app
      uses: automagicallyorg/action-azure-deploy@main
      with:
        azuerClientId: ${{ secrets.AZURE_CLIENT_ID }}
        azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
        azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azureLocation: ${{ secrets.LOCATION }}
        azureResourceGroupName: ${{ secrets.RG_NAME }}
        azureWebappName:  ${{ secrets.WEBAPP_NAME }}
        dockerLoginServer: ${{ secrets.DOCKER_LOGIN_SERVER }}
        dockerUsername: ${{ secrets.DOCKER_USERNAME }}
        dockerUserPassword: ${{ secrets.DOCKER_PASSWORD }}
 
  deploy_qa:
        
    runs-on: ubuntu-latest
    name: Deploy to QA
    needs: deploy_dev

    # output URL from deployment
    environment:
      name: QA
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    - name: Deploy app
      uses: automagicallyorg/action-azure-deploy@main
      with:
        azuerClientId: ${{ secrets.AZURE_CLIENT_ID }}
        azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
        azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azureLocation: ${{ secrets.LOCATION }}
        azureResourceGroupName: ${{ secrets.RG_NAME }}
        azureWebappName:  ${{ secrets.WEBAPP_NAME }}
        dockerLoginServer: ${{ secrets.DOCKER_LOGIN_SERVER }}
        dockerUsername: ${{ secrets.DOCKER_USERNAME }}
        dockerUserPassword: ${{ secrets.DOCKER_PASSWORD }}

  loadtest_qa:
        
    runs-on: ubuntu-latest
    name: Load test QA
    needs: deploy_dev

    # output URL from deployment
    environment:
      name: QA
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Azure Load Testing resource
      uses: azure/arm-deploy@v1
      with:
        resourceGroupName: ${{ secrets.RG_NAME }}
        template: ./infra/arm/template.json
        parameters: ./infra/arm/parameters.json name=${{ env.LOAD_TEST_RESOURCE }} location="${{ secrets.LOCATION }}"

    # load test
    - name: 'Azure Load Testing'
      uses: azure/load-testing@v1
      with:
        loadTestConfigFile: 'SampleApp.yaml'
        loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}
        resourceGroup: ${{ secrets.RG_NAME }}
        env: |
          [
            {
            "name": "${{ secrets.WEBAPP_NAME }}",
            "value": "${{ secrets.WEBAPP_NAME }}.azurewebsites.net"
            }
          ]

    - uses: actions/upload-artifact@v2
      with:
        name: loadTestResults
        path: ${{ github.workspace }}/loadTest

  deploy_staging:
        
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: deploy_qa

    # output URL from  deployment
    environment:
      name: Staging
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    - name: Deploy app
      uses: automagicallyorg/action-azure-deploy@main
      with:
        azuerClientId: ${{ secrets.AZURE_CLIENT_ID }}
        azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
        azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azureLocation: ${{ secrets.LOCATION }}
        azureResourceGroupName: ${{ secrets.RG_NAME }}
        azureWebappName:  ${{ secrets.WEBAPP_NAME }}
        dockerLoginServer: ${{ secrets.DOCKER_LOGIN_SERVER }}
        dockerUsername: ${{ secrets.DOCKER_USERNAME }}
        dockerUserPassword: ${{ secrets.DOCKER_PASSWORD }}

  deploy_production:
        
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy_staging

    # output URL from env deployment
    environment:
      name: Production
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    - name: Deploy app
      uses: automagicallyorg/action-azure-deploy@main
      with:
        azuerClientId: ${{ secrets.AZURE_CLIENT_ID }}
        azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
        azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azureLocation: ${{ secrets.LOCATION }}
        azureResourceGroupName: ${{ secrets.RG_NAME }}
        azureWebappName:  ${{ secrets.WEBAPP_NAME }}
        dockerLoginServer: ${{ secrets.DOCKER_LOGIN_SERVER }}
        dockerUsername: ${{ secrets.DOCKER_USERNAME }}
        dockerUserPassword: ${{ secrets.DOCKER_PASSWORD }}
